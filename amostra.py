# -*- coding: utf-8 -*-
"""C칩pia de Amostragem tarefa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YPVnP8b9RVCjN6RDa-5aI-OEOQY-Z2I5

# Amostragem

## Carregamento da base de dados
"""

import pandas as pd
import random
import numpy as np

dataset = pd.read_csv('credit_data.csv')

dataset.shape

dataset.head()

dataset.tail()

"""## Amostragem aleat칩ria simples"""

def amostragem_aleatoria_simples(dataset, amostras):
  return dataset.sample(n = amostras)

df_amostra_aleatoria_simples = amostragem_aleatoria_simples(dataset, 1000)
df_amostra_aleatoria_simples.shape

"""## Amostragem sistem치tica"""

def amostragem_sistematica(dataset, amostras):
  intervalo = len(dataset) // amostras
  random.seed(1)
  inicio = random.randint(0, intervalo)
  indices = np.arange(inicio, len(dataset), step = intervalo)
  amostra_sistematica = dataset.iloc[indices]
  return amostra_sistematica

df_amostra_sistematica = amostragem_sistematica(dataset, 1000)
df_amostra_sistematica.shape

"""## Amostragem por grupos"""

def amostragem_agrupamento(dataset, numero_grupos):
  intervalo = len(dataset) / numero_grupos
  
  grupos = []
  id_grupo = 0
  contagem = 0
  for _ in dataset.iterrows():
    grupos.append(id_grupo)
    contagem += 1
    if contagem > intervalo:
      contagem = 0
      id_grupo += 1

  dataset['grupo'] = grupos
  grupo_selecionado = random.randint(0, numero_grupos)
  return dataset[dataset['grupo'] == grupo_selecionado]

len(dataset) / 2

df_amostra_agrupamento = amostragem_agrupamento(dataset, 2)
df_amostra_agrupamento.shape, df_amostra_agrupamento['grupo'].value_counts()

"""## Amostra estratificada"""

from sklearn.model_selection import StratifiedShuffleSplit

dataset['c#default'].value_counts()

def amostragem_estratificada(dataset, percentual, campo):
  split = StratifiedShuffleSplit(test_size = percentual, random_state=1)
  for _, y in split.split(dataset, dataset[campo]):
    df_y = dataset.iloc[y]
  return df_y

df_amostra_estratificada = amostragem_estratificada(dataset, 0.5, 'c#default')
df_amostra_estratificada.shape

"""## Amostra de reservat칩rio"""

def amostragem_reservatorio(dataset, amostras):
  stream = []
  for i in range(len(dataset)):
    stream.append(i)
  
  i = 0
  tamanho = len(dataset)

  reservatorio = [0] * amostras
  for i in range(amostras):
    reservatorio[i] = stream[i]

  while (i < tamanho):
    j = random.randrange(i + 1)
    if (j < amostras): 
      reservatorio[j] = stream[i]
    i += 1

  return dataset.iloc[reservatorio]

df_amostragem_reservatorio = amostragem_reservatorio(dataset, 1000)
df_amostragem_reservatorio.shape

"""## Comparativo dos resultados"""

dataset['age'].mean(), dataset['income'].mean(), dataset['loan'].mean()

df_amostra_aleatoria_simples['age'].mean(), df_amostra_aleatoria_simples['income'].mean(), df_amostra_aleatoria_simples['loan'].mean()

df_amostra_sistematica['age'].mean(), df_amostra_sistematica['income'].mean(), df_amostra_sistematica['loan'].mean()

df_amostra_agrupamento['age'].mean(), df_amostra_agrupamento['income'].mean(), df_amostra_agrupamento['loan'].mean()

df_amostra_estratificada['age'].mean(), df_amostra_estratificada['income'].mean(), df_amostra_estratificada['loan'].mean()

df_amostragem_reservatorio['age'].mean(), df_amostragem_reservatorio['income'].mean(), df_amostragem_reservatorio['loan'].mean()
